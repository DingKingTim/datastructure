cscope 15 /Volumes/Samsung_T5/turior/datastructure/sort               0000010473
	@common.h

1 #i‚de‡
_COMMON_H_


2 
	#_COMMON_H_


	)

4 
	$boﬁ
 (*
	tcom∑ª_t
)(*, 
	tsize_t
 
	ti
, size_à
	tj
);

5 
	$boﬁ
 (*
	tcom∑ª_d©a_t
)(*, *);

6 (*
	tcom∑ª_equÆ_t
)(*, *);

7 (*
	tsw≠_t
)(*, 
	tsize_t
 
	ti
, size_à
	tj
);

	@main.cc

1 
	~<io°ªam
>

2 
	~<˘ime
>

3 
	~"s‹t.h
"

4 
	~"£¨ch.h
"

6 
	#SIZE
 10

	)

8 
boﬁ
 
	$com∑ª
(*
d
, 
size_t
 
i
, size_à
j
) {

9 *
¨r
 = (*)
d
;

10  
¨r
[
i
] <áº[
j
];

11 
	}
}

13 
boﬁ
 
	$com∑ª_d©a
(*
d1
, * 
d2
) {

14 
a
 = *((*)
d1
);

15 
b
 = *((*)
d2
);

16  
a
 < 
b
;

17 
	}
}

20 
	$com∑ª_equó
(*
d1
, * 
d2
) {

21 
a
 = *((*)
d1
);

22 
b
 = *((*)
d2
);

24 i‡(
a
 > 
b
)  1;

25 i‡(
a
 < 
b
)  -1;

27 
	}
}

32 
	$sw≠
(*
d
, 
size_t
 
i
, size_à
j
) {

33 *
¨r
 = (*)
d
;

34 i‡(
¨r
[
i
] =¨r[
j
]) {

38 
¨r
[
i
] =áº[i] ^áº[
j
];

39 
¨r
[
j
] =áº[
i
] ^árr[j];

40 
¨r
[
i
] =áº[i] ^áº[
j
];

41 
	}
}

43 
	$¥öt
(*
¨r
, 
size
) {

44 
size_t
 
i
=0; i<
size
; i++) {

45 
°d
::
cout
 << 
¨r
[
i
] << " ";

47 
°d
::
cout
 << std::
ídl
;

48 
	}
}

50 * 
	$gíî©e_d©a
(
size
) {

51 *
¨r
 = 
√w
 [
size
];

52 
°d
::
	`mem£t
(
¨r
, 0, 
size
);

54 
i
=0; i<
size
; i++) {

55 
x
 = 1 + 
°d
::
	`ønd
()/((
RAND_MAX
 + 1u)/99);

56 
¨r
[
i
] = 
x
;

59  
¨r
;

60 
	}
}

62 
	$£¨ch
(*
d©a
, 
size
, 
i
) {

63 
Sórch
<> 
	`£¨ch
(
com∑ª_equó
);

64 
°d
::
cout
 << "Sórch index: d©a[" << 
i
 << "]: " << 
d©a
[i] << std::
ídl
;

65 
°d
::
cout
 << "1.Üöó∏ : " << 
£¨ch
.
	`löór_£¨ch
(
d©a
, 
size
, d©a[
i
]Ë<< std::
ídl
;

66 
°d
::
cout
 << "2. bö¨y : " << 
£¨ch
.
	`bö¨y_£¨ch
(
d©a
, 
size
, d©a[
i
]Ë<< std::
ídl
;

67 
	}
}

69 
	$£À˘_s‹t
() {

70 *
¨r
 = 
	`gíî©e_d©a
(
SIZE
);

71 
	`¥öt
(
¨r
, 
SIZE
);

73 
S‹t
<, 
SIZE
> 
	`s‹t
(
com∑ª
, 
sw≠
);

74 
s‹t
.
	`£À˘_s‹t
(
¨r
);

75 
	`¥öt
(
¨r
, 
SIZE
);

76 
	`£¨ch
(
¨r
, 
SIZE
, 4);

77 
	}
}

79 
	$mîge_s‹t
() {

80 *
¨r
 = 
	`gíî©e_d©a
(
SIZE
);

81 
	`¥öt
(
¨r
, 
SIZE
);

83 
S‹t
<, 
SIZE
> 
	`s‹t
(
com∑ª_d©a
, 
sw≠
);

84 
s‹t
.
	`mîge_s‹t
(
¨r
);

85 
	`¥öt
(
¨r
, 
SIZE
);

86 
	`£¨ch
(
¨r
, 
SIZE
, 4);

87 
	}
}

89 
	$ö£π_s‹t
() {

90 *
¨r
 = 
	`gíî©e_d©a
(
SIZE
);

91 
	`¥öt
(
¨r
, 
SIZE
);

93 
S‹t
<, 
SIZE
> 
	`s‹t
(
com∑ª_d©a
, 
sw≠
);

94 
s‹t
.
	`ö£π_s‹t
(
¨r
);

95 
	`¥öt
(
¨r
, 
SIZE
);

96 
	`£¨ch
(
¨r
, 
SIZE
, 4);

97 
	}
}

99 
	$hóp_s‹t
() {

100 *
¨r
 = 
	`gíî©e_d©a
(
SIZE
);

101 
	`¥öt
(
¨r
, 
SIZE
);

103 
S‹t
<, 
SIZE
> 
	`s‹t
(
com∑ª
, 
sw≠
);

104 
s‹t
.
	`hóp_s‹t
(
¨r
);

106 
	`¥öt
(
¨r
, 
SIZE
);

107 
	`£¨ch
(
¨r
, 
SIZE
, 4);

108 
	}
}

110 
	$bubbÀ_s‹t
() {

111 *
¨r
 = 
	`gíî©e_d©a
(
SIZE
);

112 
	`¥öt
(
¨r
, 
SIZE
);

114 
S‹t
<, 
SIZE
> 
	`s‹t
(
com∑ª
, 
sw≠
);

115 
s‹t
.
	`bubbÀ_s‹t
(
¨r
);

117 
	`¥öt
(
¨r
, 
SIZE
);

118 
	`£¨ch
(
¨r
, 
SIZE
, 4);

119 
	}
}

121 
	$quick_s‹t
() {

122 *
¨r
 = 
	`gíî©e_d©a
(
SIZE
);

123 
	`¥öt
(
¨r
, 
SIZE
);

125 
S‹t
<, 
SIZE
> 
	`s‹t
(
com∑ª
, 
sw≠
);

126 
s‹t
.
	`quick_s‹t
(
¨r
);

128 
	`¥öt
(
¨r
, 
SIZE
);

129 
	`£¨ch
(
¨r
, 
SIZE
, 4);

130 
	}
}

134 
	$maö
() {

135 
°d
::
	`§™d
(°d::
	`time
(
nuŒ±r
));

137 
°d
::
cout
 << "1. sñe˘ s‹àã°. " << std::
ídl
;

138 
	`£À˘_s‹t
();

140 
°d
::
cout
 << std::
ídl
 << "2. insert sortÅest. " << std::endl;

141 
	`ö£π_s‹t
();

143 
°d
::
cout
 << std::
ídl
 << "3. merge sortÅest. " << std::endl;

144 
	`mîge_s‹t
();

146 
°d
::
cout
 << std::
ídl
 << "4. heap sortÅest. " << std::endl;

147 
	`hóp_s‹t
();

149 
°d
::
cout
 << std::
ídl
 << "5. bubble sortÅest. " << std::endl;

150 
	`bubbÀ_s‹t
();

152 
°d
::
cout
 << std::
ídl
 << "6. quick sortÅest. " << std::endl;

153 
	`quick_s‹t
();

156 
	}
}

	@search.h

1 #i‚de‡
_SEARCH_H_


2 
	#_SEARCH_H_


	)

3 
	~"comm⁄.h
"

5 
	gãm∂©e
 <
˛ass
 
	gT
>

6 ˛as†
	cSórch
 {

7 
	mpublic
:

8 
	$Sórch
(
com∑ª_equÆ_t
 
e
Ë: 
	$com∑ª_equÆ_
(
e
) {}

9 
	`löór_£¨ch
(
T
 *
d©a
, 
size
, T 
d
);

10 
	`bö¨y_£¨ch
(
T
 *
d©a
, 
size
, T 
d
);

12 
¥iv©e
:

13 
	`_bö¨y_£¨ch
(
T
 *
d©a
, 
l
, 
r
, T 
d
);

15 
¥iv©e
:

16 
com∑ª_equÆ_t
 
com∑ª_equÆ_
;

17 
	}
};

19 
	gãm∂©e
 <
˛ass
 
	gT
>

20 
	gSórch
<
	gT
>::
	$löór_£¨ch
(
T
 *
d©a
, 
size
, T 
d
) {

21 
i
=0; i<
size
; i++) {

22 i‡(0 =
this
->
	`com∑ª_equÆ_
(&(
d©a
[
i
]), &
d
)) {

23  
i
;

28 
	}
}

30 
	gãm∂©e
 <
˛ass
 
	gT
>

31 
	gSórch
<
	gT
>::
	$_bö¨y_£¨ch
(
T
 *
d©a
, 
l
, 
r
, T 
d
) {

32 
mid
 = 
l
 + ((
r
-l) >> 1);

33 
ªt
 = 
this
->
	`com∑ª_equÆ_
(&(
d©a
[
mid
]), &
d
);

34 i‡(
ªt
 > 0) {

35 
this
->
	`_bö¨y_£¨ch
(
d©a
, 
mid
+1, 
r
, 
d
);

36 } i‡(
ªt
 < 0) {

37 
this
->
	`_bö¨y_£¨ch
(
d©a
, 
l
, 
mid
-1, 
d
);

39  
mid
;

43 
	}
}

45 
	gãm∂©e
 <
˛ass
 
	gT
>

46 
	gSórch
<
	gT
>::
	$bö¨y_£¨ch
(
T
 *
d©a
, 
size
, T 
d
) {

47  
this
->
	`_bö¨y_£¨ch
(
d©a
, 0, 
size
-1, 
d
);

48 
	}
}

	@sort.h

1 #i‚de‡
_SORT_H_


2 
	#_SORT_H_


	)

3 
	~<io°ªam
>

4 
	~"comm⁄.h
"

7 
	#PARENT
(
i
Ë((iË>> 1)

	)

8 
	#LEFT
(
i
Ë((iË<< 1)

	)

9 
	#RIGHT
(
i
Ë(
	`LEFT
(iË+ 1)

	)

10 
	#LAST_PARENT
(
n
Ë(“Ë>> 1)

	)

13 
	gãm∂©e
<
˛ass
 
	gT
, 
	gsize
>

14 ˛as†
	cS‹t
 {

15 
	mpublic
:

16 
S‹t
(
com∑ª_t
 
m
, 
sw≠_t
 
s
);

17 
S‹t
(
com∑ª_d©a_t
 
m
, 
sw≠_t
 
s
);

19 
£À˘_s‹t
(
T
* 
d©a
);

20 
ö£π_s‹t
(
T
* 
d©a
);

21 
mîge_s‹t
(
T
* 
d©a
);

22 
hóp_s‹t
(
T
 *
d©a
);

23 
bubbÀ_s‹t
(
T
 *
d©a
);

24 
quick_s‹t
(
T
 *
d©a
);

26 
	m¥iv©e
:

27 
_mîge_s‹t
(
T
* 
d©a
, 
l
, 
r
);

28 
_hópify
(
T
* 
a
, 
Àn
, 
i
);

29 
_buûd_hóp
(
T
* 
a
);

30 
_∑πôi⁄
(
T
 *
d©a
, 
low
, 
high
);

31 
_quick_s‹t
(
T
 *
d©a
, 
low
, 
high
);

32 
_mîge
(
T
* 
d©a
, 
l
, 
r
, 
m
);

34 
	m¥iv©e
:

35 
com∑ª_t
 
com∑ª_
;

36 
com∑ª_d©a_t
 
	mcom∑ª_d©a_
;

37 
sw≠_t
 
	msw≠_
;

40 
	gãm∂©e
<
˛ass
 
	gT
, 
	gsize
>

41 
	gS‹t
<
	gT
, 
	gsize
>::
	$S‹t
(
com∑ª_t
 
m
, 
sw≠_t
 
s
Ë: 
	`com∑ª_
(m), 
	$sw≠_
(
s
) {

42 
this
->
com∑ª_d©a_
 = 
NULL
;

43 
	}
}

45 
	gãm∂©e
<
˛ass
 
	gT
, 
	gsize
>

46 
	gS‹t
<
	gT
, 
	gsize
>::
	$S‹t
(
com∑ª_d©a_t
 
m
, 
sw≠_t
 
s
Ë: 
	`com∑ª_d©a_
(m), 
	$sw≠_
(
s
) {

47 
	}
}

49 
	gãm∂©e
<
˛ass
 
	gT
, 
	gsize
>

50 
	gS‹t
<
	gT
, 
	gsize
>::
	$£À˘_s‹t
(
T
* 
d©a
) {

51 
size_t
 
i
=0; i<(
size
-1); i++) {

52 
size_t
 
m
 = 
i
;

53 
size_t
 
j
=
i
+1; j<
size
; j++) {

54 i‡(
this
->
	`com∑ª_
(
d©a
, 
m
, 
j
)) {

55 
m
 = 
j
;

58 i‡(
m
 !
i
) {

59 
this
->
	`sw≠_
(
d©a
, 
m
, 
i
);

62 
	}
}

64 
	gãm∂©e
<
˛ass
 
	gT
, 
	gsize
>

65 
	gS‹t
<
	gT
, 
	gsize
>::
	$ö£π_s‹t
(
T
* 
d©a
) {

66 
i
, 
j
, 
k
;

68 
i
=1; i<
size
; i++) {

69 
T
 
key
 = 
d©a
[
i
];

70 
j
=
i
-1; j>=0; j--) {

71 i‡(
this
->
	`com∑ª_d©a_
(&
d©a
[
j
], &
key
)) {

72 
d©a
[
j
+1] = data[j];

77 
d©a
[
j
+1] = 
key
;

79 
	}
}

81 
	gãm∂©e
<
˛ass
 
	gT
, 
	gsize
>

82 
	gS‹t
<
	gT
, 
	gsize
>::
	$_mîge
(
T
* 
d©a
, 
l
, 
r
, 
m
) {

83 
l_size
 = 
m
 - 
l
 + 1;

84 
r_size
 = 
r
 - 
m
;

88 
T
 *
œ
 = 
√w
 T[
l_size
];

89 
°d
::
	`mem£t
(
œ
, 0, 
l_size
);

91 
T
 *
ø
 = 
√w
 T[
r_size
];

92 
°d
::
	`mem£t
(
ø
, 0, 
r_size
);

94 
i
=0; i<
l_size
; i++) {

95 
œ
[
i
] = 
d©a
[
l
 + i];

98 
j
=0; j<
r_size
; j++) {

99 
ø
[
j
] = 
d©a
[
m
 + j + 1];

102 
i
=0;

103 
j
=0;

104 
k
=
l
;

106 
i
<
l_size
 && 
j
<
r_size
) {

107 i‡(
this
->
	`com∑ª_d©a_
(&
œ
[
i
], &
ø
[i])) {

108 
d©a
[
k
] = 
œ
[
i
];

109 
i
++;

111 
d©a
[
k
] = 
ø
[
j
];

112 
j
++;

114 
k
++;

117 
i
<
l_size
) {

118 
d©a
[
k
] = 
œ
[
i
];

119 
i
++;

120 
k
++;

123 
j
<
r_size
) {

124 
d©a
[
k
] = 
ø
[
j
];

125 
j
++;

126 
k
++;

129 
dñëe
 [] 
œ
;

130 
dñëe
 [] 
ø
;

131 
	}
}

133 
	gãm∂©e
<
˛ass
 
	gT
, 
	gsize
>

134 
	gS‹t
<
	gT
, 
	gsize
>::
	$_mîge_s‹t
(
T
* 
d©a
, 
l
, 
r
) {

135 i‡(
l
 < 
r
) {

136 
mid
 = 
l
 + ((
r
 -Ü) >> 1);

138 
this
->
	`_mîge_s‹t
(
d©a
, 
l
, 
mid
);

139 
this
->
	`_mîge_s‹t
(
d©a
, 
mid
+1, 
r
);

140 
this
->
	`_mîge
(
d©a
, 
l
, 
r
, 
mid
);

142 
	}
}

144 
	gãm∂©e
<
˛ass
 
	gT
, 
	gsize
>

145 
	gS‹t
<
	gT
, 
	gsize
>::
	$mîge_s‹t
(
T
* 
d©a
) {

146 
this
->
	`_mîge_s‹t
(
d©a
, 0, 
size
-1);

147 
	}
}

149 
	gãm∂©e
 <
˛ass
 
	gT
, 
	gsize
>

150 
	gS‹t
<
	gT
, 
	gsize
>::
	$_hópify
(
T
* 
a
, 
Àn
, 
i
) {

152 
À·
 = 
	`LEFT
(
i
);

153 
right
 = 
	`RIGHT
(
i
);

154 
œrge
 = 
i
;

156 i‡(
À·
 <
Àn
 && 
this
->
	`com∑ª_
(
a
,Üe·-1, 
i
-1)) {

158 i‡(
right
 <
Àn
) {

159 
œrge
 = 
this
->
	`com∑ª_
(
a
, 
À·
-1, 
right
-1) ?Üeft :Ñight;

161 
œrge
 = 
À·
;

164 } i‡(
right
 <
Àn
 && 
this
->
	`com∑ª_
(
a
,Ñight-1, 
i
-1)) {

166 
œrge
 = 
this
->
	`com∑ª_
(
a
, 
À·
-1, 
right
-1) ?Üeft :Ñight;

169 i‡(
œrge
 !
i
) {

170 
this
->
	`sw≠_
(
a
, 
i
-1, 
œrge
-1);

171 
this
->
	`_hópify
(
a
, 
Àn
, 
œrge
);

173 
	}
}

175 
	gãm∂©e
 <
˛ass
 
	gT
, 
	gsize
>

176 
	gS‹t
<
	gT
, 
	gsize
>::
	$_buûd_hóp
(
T
* 
a
) {

178 
i
 = 
	`LAST_PARENT
(
size
);

179 ; 
i
>0; --i) {

180 
this
->
	`_hópify
(
a
, 
size
, 
i
);

182 
	}
}

184 
	gãm∂©e
 <
˛ass
 
	gT
, 
	gsize
>

185 
	gS‹t
<
	gT
, 
	gsize
>::
	$hóp_s‹t
(
T
 *
a
) {

187 
this
->
	`_buûd_hóp
(
a
);

189 
i
=0;

190 
ønge_idx
 = 
size
;

191 
ønge_idx
 > 1) {

192 
this
->
	`sw≠_
(
a
, 0, 
ønge_idx
-1);

193 
ønge_idx
 -= 1;

194 
this
->
	`_hópify
(
a
, 
ønge_idx
, 1);

195 
i
++;

197 
	}
}

199 
	gãm∂©e
 <
˛ass
 
	gT
, 
	gsize
>

200 
	gS‹t
<
	gT
, 
	gsize
>::
	$bubbÀ_s‹t
(
T
 *
d©a
) {

201 
i
=
size
-1; i>0; i--) {

202 
j
=0; j<
i
; j++) {

203 i‡(
this
->
	`com∑ª_
(
d©a
, 
j
, j+1)) {

204 
this
->
	`sw≠_
(
d©a
, 
j
, j+1);

208 
	}
}

210 
	gãm∂©e
 <
˛ass
 
	gT
, 
	gsize
>

211 
	gS‹t
<
	gT
, 
	gsize
>::
	$_∑πôi⁄
(
T
 *
d©a
, 
low
, 
high
) {

212 
pivŸ_idx
 = 
high
;

214 
i
 = 
low
;

215 
j
 = 
high
;

217 
i
 !
j
) {

218 
this
->
	`com∑ª_
(
d©a
, 
j
, 
pivŸ_idx
)) {

219 
j
--;

222 
i
!=
j
 && !
this
->
	`com∑ª_
(
d©a
, i, 
pivŸ_idx
)) {

223 
i
++;

225 
this
->
	`sw≠_
(
d©a
, 
i
, 
j
);

228  
i
;

229 
	}
}

231 
	gãm∂©e
 <
˛ass
 
	gT
, 
	gsize
>

232 
	gS‹t
<
	gT
, 
	gsize
>::
	$_quick_s‹t
(
T
 *
d©a
, 
low
, 
high
) {

233 i‡(
low
 < 
high
) {

234 
mid
 = 
this
->
	`_∑πôi⁄
(
d©a
, 
low
, 
high
);

235 
this
->
	`_quick_s‹t
(
d©a
, 
low
, 
mid
-1);

236 
this
->
	`_quick_s‹t
(
d©a
, 
mid
+1, 
high
);

238 
	}
}

240 
	gãm∂©e
 <
˛ass
 
	gT
, 
	gsize
>

241 
	gS‹t
<
	gT
, 
	gsize
>::
	$quick_s‹t
(
T
 *
d©a
) {

242 
this
->
	`_quick_s‹t
(
d©a
, 0, 
size
-1);

243 
	}
}

	@
1
.
1
/usr/include
4
33
common.h
main.cc
search.h
sort.h
