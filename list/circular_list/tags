!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$	tags	/^MemoryException	circular_list.h	\/^class MemoryException : public std::exception {$\/;"	c	inherits:std::exception$/;"	m	class:MemoryException	file:	access:private
$	tags	/^MemoryException::what	circular_list.h	\/^        const char* what() {$\/;"	f	class:MemoryException	access:public	signature:()$/;"	m	class:MemoryException::__anon2	file:	access:private
CircularList	circular_list.h	/^        CircularList();$/;"	p	class:CircularList	access:public	signature:()
CircularList	circular_list.h	/^CircularList<T>::CircularList() : tail_(nullptr), size_(0) {$/;"	f	class:CircularList	signature:()
CircularList	circular_list.h	/^class CircularList {$/;"	c
CircularList::CircularList	circular_list.h	/^        CircularList();$/;"	p	class:CircularList	access:public	signature:()
CircularList::CircularList	circular_list.h	/^CircularList<T>::CircularList() : tail_(nullptr), size_(0) {$/;"	f	class:CircularList	signature:()
CircularList::append	circular_list.h	/^        void append(T data);$/;"	p	class:CircularList	access:public	signature:(T data)
CircularList::append	circular_list.h	/^void CircularList<T>::append(T data) {$/;"	f	class:CircularList	signature:(T data)
CircularList::del	circular_list.h	/^        void del(T data);$/;"	p	class:CircularList	access:public	signature:(T data)
CircularList::del	circular_list.h	/^void CircularList<T>::del(T data) {$/;"	f	class:CircularList	signature:(T data)
CircularList::operator []	circular_list.h	/^        Node<T> operator[](size_t idx) const;$/;"	p	class:CircularList	access:public	signature:(size_t idx) const
CircularList::operator []	circular_list.h	/^Node<T> CircularList<T>::operator[](size_t idx) const {$/;"	f	class:CircularList	signature:(size_t idx) const
CircularList::print	circular_list.h	/^        void print() const;$/;"	p	class:CircularList	access:public	signature:() const
CircularList::print	circular_list.h	/^void CircularList<T>::print() const {$/;"	f	class:CircularList	signature:() const
CircularList::size	circular_list.h	/^        size_t size() const;$/;"	p	class:CircularList	access:public	signature:() const
CircularList::size	circular_list.h	/^size_t CircularList<T>::size() const {$/;"	f	class:CircularList	signature:() const
CircularList::size_	circular_list.h	/^        size_t size_;$/;"	m	class:CircularList	access:private
CircularList::tail_	circular_list.h	/^        Node<T>* tail_;$/;"	m	class:CircularList	access:private
IndexOutException	circular_list.h	/^class IndexOutException : public std::exception {$/;"	c	inherits:std::exception
IndexOutException::what	circular_list.h	/^        const char* what() {$/;"	f	class:IndexOutException	access:public	signature:()
MemoryException	circular_list.h	/^class MemoryException : public std::exception {$/;"	c	inherits:std::exception
MemoryException	tags	/^MemoryException	circular_list.h	\/^class MemoryException : public std::exception {$\/;"	c	inherits:std::exception$/;"	c	file:	inherits:std::exception
MemoryException::$	tags	/^MemoryException	circular_list.h	\/^class MemoryException : public std::exception {$\/;"	c	inherits:std::exception$/;"	m	class:MemoryException	file:	access:private
MemoryException::__anon2::$	tags	/^MemoryException::what	circular_list.h	\/^        const char* what() {$\/;"	f	class:MemoryException	access:public	signature:()$/;"	m	class:MemoryException::__anon2	file:	access:private
MemoryException::__anon2::what	tags	/^what	circular_list.h	\/^        const char* what() {$\/;"	f	class:IndexOutException	access:public	signature:()$/;"	f	class:MemoryException::__anon2	file:	access:private	signature:()
MemoryException::what	circular_list.h	/^        const char* what() {$/;"	f	class:MemoryException	access:public	signature:()
Node	circular_list.h	/^class Node {$/;"	c
Node::data	circular_list.h	/^        T data;$/;"	m	class:Node	access:public
Node::next	circular_list.h	/^        Node* next;$/;"	m	class:Node	access:public
_CIRCULAR_LIST_H_	circular_list.h	2;"	d
append	circular_list.h	/^        void append(T data);$/;"	p	class:CircularList	access:public	signature:(T data)
append	circular_list.h	/^void CircularList<T>::append(T data) {$/;"	f	class:CircularList	signature:(T data)
data	circular_list.h	/^        T data;$/;"	m	class:Node	access:public
del	circular_list.h	/^        void del(T data);$/;"	p	class:CircularList	access:public	signature:(T data)
del	circular_list.h	/^void CircularList<T>::del(T data) {$/;"	f	class:CircularList	signature:(T data)
format	tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
main	main.cc	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
next	circular_list.h	/^        Node* next;$/;"	m	class:Node	access:public
operator []	circular_list.h	/^        Node<T> operator[](size_t idx) const;$/;"	p	class:CircularList	access:public	signature:(size_t idx) const
operator []	circular_list.h	/^Node<T> CircularList<T>::operator[](size_t idx) const {$/;"	f	class:CircularList	signature:(size_t idx) const
print	circular_list.h	/^        void print() const;$/;"	p	class:CircularList	access:public	signature:() const
print	circular_list.h	/^void CircularList<T>::print() const {$/;"	f	class:CircularList	signature:() const
size	circular_list.h	/^        size_t size() const;$/;"	p	class:CircularList	access:public	signature:() const
size	circular_list.h	/^size_t CircularList<T>::size() const {$/;"	f	class:CircularList	signature:() const
size_	circular_list.h	/^        size_t size_;$/;"	m	class:CircularList	access:private
tail_	circular_list.h	/^        Node<T>* tail_;$/;"	m	class:CircularList	access:private
what	circular_list.h	/^        const char* what() {$/;"	f	class:IndexOutException	access:public	signature:()
what	circular_list.h	/^        const char* what() {$/;"	f	class:MemoryException	access:public	signature:()
what	tags	/^what	circular_list.h	\/^        const char* what() {$\/;"	f	class:IndexOutException	access:public	signature:()$/;"	f	class:MemoryException::__anon2	file:	access:private	signature:()
